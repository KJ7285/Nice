-- Load Linoria, ThemeManager, SaveManager (same as original)
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Mc4121ban/Linoria-Library-Mobile/refs/heads/main/Gui%20Lib%20%5BLibrary%5D"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/KJ7285/Theme-manger-/refs/heads/main/ThemeManager.Lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Mc4121ban/Linoria-Library-Mobile/refs/heads/main/Gui%20Lib%20%5BSaveManager%5D"))()

-- Create window named [MoonLight]🌙
local Window = Library:CreateWindow({
    Title = '[MoonLight]🌙',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2,
    Size = UDim2.new(0, 450, 0, 450),
})
local Tabs = {
    Main = Window:AddTab('Main'),
    Misc = Window:AddTab('Misc'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Simple debug: list all keys in Options
local function printOptionsKeys()
    if typeof(Options) == "table" then
        local keys = {}
        for k,_ in pairs(Options) do
            table.insert(keys, k)
        end
        warn("Options keys:", unpack(keys))
    else
        warn("Options is not a table!")
    end
end

-- Config vars
local predX = 0.13946352838245239252
local predY = 0.075
local camEnabled = false
local lockEnabled = false
local targetPlayer = nil
local targetUserId = nil
local connRender = nil
local currentHighlight = nil
local wallCheckEnabled = false
local friendCheckEnabled = false
local koCheckEnabled = false
local autoAirEnabled = false
local prevInAir = false
local autoArmorEnabled = false
local autoReloadEnabled = false
-- silentAim config
local silentAim = { isActive = false, targetPart = "HumanoidRootPart", prediction = 0.165 }

-- R15 parts list
local r15Parts = {
    "HumanoidRootPart","LowerTorso","UpperTorso","Head",
    "LeftUpperArm","LeftLowerArm","LeftHand",
    "RightUpperArm","RightLowerArm","RightHand",
    "LeftUpperLeg","LeftLowerLeg","LeftFoot",
    "RightUpperLeg","RightLowerLeg","RightFoot"
}

-- Helper to safely get dropdown values from Options
local function safeGetDropdownValue(key, default)
    if type(Options) == "table" and Options[key] then
        local v = Options[key].Value
        if type(v) == "string" then
            return v
        end
    end
    return default
end
-- Helper to safely get color picker
local function safeGetColorValue(key, default)
    if type(Options) == "table" and Options[key] then
        local v = Options[key].Value
        if typeof(v) == "Color3" then
            return v
        end
    end
    return default
end

-- MAIN TAB UI
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('CamLock Settings')

-- Simple original example toggle, to compare:
LeftGroupBox:AddToggle('TestToggle', {
    Text = 'Test Toggle',
    Default = false,
    Tooltip = 'Just to test Options key existence',
    Callback = function(val)
        print('[cb] TestToggle changed:', val)
        -- print current Options keys for debugging
        printOptionsKeys()
    end
})

-- Cam toggle
LeftGroupBox:AddToggle('CamLockToggle', {
    Text = 'Enable CamLock',
    Default = false,
    Tooltip = 'Enable camera lock',
    Callback = function(v)
        camEnabled = v
        if not camEnabled and not lockEnabled then
            if connRender then connRender:Disconnect() connRender = nil end
            if currentHighlight then currentHighlight:Destroy() currentHighlight = nil end
            targetPlayer = nil; prevInAir = false
            silentAim.isActive = false
            btn.Text = "🔓"
            Library:Notify("Tanku:Unlocked from them")
        end
    end
})

-- Lock toggle
LeftGroupBox:AddToggle('LockToggle', {
    Text = 'Enable Lock',
    Default = false,
    Tooltip = 'Enable silent lock',
    Callback = function(v)
        lockEnabled = v
        silentAim.isActive = v
        if not v and not camEnabled then
            if connRender then connRender:Disconnect() connRender = nil end
            if currentHighlight then currentHighlight:Destroy() currentHighlight = nil end
            targetPlayer = nil; prevInAir = false
            btn.Text = "🔓"
            Library:Notify("Tanku:Unlocked from them")
        end
    end
})

-- Prediction inputs
LeftGroupBox:AddInput('CamPredX', {
    Default = tostring(predX),
    Numeric = true,
    Finished = false,
    Text = 'Cam Pred X',
    Tooltip = 'Prediction X for cam',
    Placeholder = '0.139',
    Callback = function(val)
        local n = tonumber(val)
        if n then predX = n end
    end
})
LeftGroupBox:AddInput('CamPredY', {
    Default = tostring(predY),
    Numeric = true,
    Finished = false,
    Text = 'Cam Pred Y',
    Tooltip = 'Prediction Y for cam',
    Placeholder = '0.075',
    Callback = function(val)
        local n = tonumber(val)
        if n then predY = n end
    end
})
LeftGroupBox:AddInput('LockPred', {
    Default = tostring(silentAim.prediction),
    Numeric = true,
    Finished = false,
    Text = 'Lock Pred',
    Tooltip = 'Prediction for silent lock',
    Placeholder = '0.165',
    Callback = function(val)
        local n = tonumber(val)
        if n then silentAim.prediction = n end
    end
})

-- Dropdowns for parts
LeftGroupBox:AddDropdown('AimPartDropdown', {
    Values = r15Parts,
    Default = 1,
    Multi = false,
    Text = 'AimPart',
    Tooltip = 'Part for cam/lock on ground',
    Callback = function(val)
        silentAim.targetPart = val or "HumanoidRootPart"
    end
})
LeftGroupBox:AddDropdown('AirPartDropdown', {
    Values = r15Parts,
    Default = 1,
    Multi = false,
    Text = 'AirPart',
    Tooltip = 'Part for cam/lock in air',
    Callback = function(val) end
})

-- Highlight color picker
LeftGroupBox:AddLabel('Highlight Color'):AddColorPicker('HighlightColor', {
    Default = Color3.new(1,0,0),
    Title = 'Highlight Color',
    Transparency = 0,
    Callback = function(val) end
})

-- Other toggles
LeftGroupBox:AddToggle('WallCheckToggle', {
    Text = 'WallCheck',
    Default = false,
    Tooltip = 'Skip blocked targets on acquire',
    Callback = function(v) wallCheckEnabled = v end
})
LeftGroupBox:AddToggle('FriendCheckToggle', {
    Text = 'FriendCheck',
    Default = false,
    Tooltip = 'Skip friends',
    Callback = function(v) friendCheckEnabled = v end
})
LeftGroupBox:AddToggle('KoCheckToggle', {
    Text = 'KoCheck',
    Default = false,
    Tooltip = 'Unlock if Knocked attr true',
    Callback = function(v) koCheckEnabled = v end
})
LeftGroupBox:AddToggle('AutoAirToggle', {
    Text = 'AutoAir',
    Default = false,
    Tooltip = 'Activate tool when target in air',
    Callback = function(v) autoAirEnabled = v end
})

-- MISC TAB UI
local miscGroup = Tabs.Misc:AddLeftGroupbox('Misc Settings')
miscGroup:AddToggle('AutoArmorToggle', {
    Text = 'Auto Armor',
    Default = false,
    Tooltip = 'Spam armor pad',
    Callback = function(v) autoArmorEnabled = v end
})
miscGroup:AddToggle('AutoReloadToggle', {
    Text = 'Auto Reload',
    Default = false,
    Tooltip = 'Auto reload when ammo hits zero',
    Callback = function(v) autoReloadEnabled = v end
})

-- UI Settings
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
ThemeManager:SetFolder('MoonLight')
SaveManager:SetFolder('MoonLight/specific-game')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local cam = workspace.CurrentCamera

-- On-screen button
local screenGui = Instance.new("ScreenGui")
screenGui.Name = "CamLockGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = game:GetService("CoreGui")

local btn = Instance.new("TextButton")
btn.Size = UDim2.new(0, 90, 0, 90)
btn.Position = UDim2.new(0, 10, 0, 100)
btn.AnchorPoint = Vector2.new(0,0)
btn.BackgroundTransparency = 0.3
btn.BackgroundColor3 = Color3.new(0,0,0)
btn.BorderSizePixel = 0
btn.Text = "🔓"
btn.TextScaled = true
btn.Parent = screenGui

local uiCorner = Instance.new("UICorner")
uiCorner.CornerRadius = UDim.new(0, 9)
uiCorner.Parent = btn

-- Watermark
local FrameTimer, FrameCounter, FPS = tick(), 0, 60
RunService.RenderStepped:Connect(function()
    FrameCounter += 1
    if tick() - FrameTimer >= 1 then
        FPS = FrameCounter
        FrameTimer = tick()
        FrameCounter = 0
    end
    Library:SetWatermark(('MoonLight 🌙 | %s fps'):format(math.floor(FPS)))
end)

-- Highlight helpers
local function destroyHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
    end
end
local function applyHighlight(char)
    destroyHighlight()
    local col = safeGetColorValue("HighlightColor", Color3.new(1,0,0))
    local h = Instance.new("Highlight")
    h.Adornee = char
    h.FillTransparency = 0.5
    h.OutlineTransparency = 0
    h.OutlineColor = col
    h.Parent = char
    currentHighlight = h
end

-- Raycast for wall check
local function raycastBlock(origin, pos)
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    local ignoreList = {LocalPlayer.Character}
    if targetPlayer and targetPlayer.Character then
        table.insert(ignoreList, targetPlayer.Character)
    end
    params.FilterDescendantsInstances = ignoreList
    local result = workspace:Raycast(origin, pos - origin, params)
    return result ~= nil
end

-- Stop cam/lock
local function stopLock()
    if connRender then
        connRender:Disconnect()
        connRender = nil
    end
    destroyHighlight()
    targetPlayer = nil
    prevInAir = false
    silentAim.isActive = false
    btn.Text = "🔓"
    Library:Notify("Tanku:Unlocked from them")
end

-- Main loop for cam & lock
local function startRenderSteppedLock(pl)
    if connRender then
        connRender:Disconnect()
        connRender = nil
    end
    connRender = RunService.RenderStepped:Connect(function()
        if not (camEnabled or lockEnabled) then
            stopLock()
            return
        end
        if not targetPlayer then
            stopLock()
            return
        end
        local char = targetPlayer.Character
        if not char then
            return
        end
        local humanoid = char:FindFirstChild("Humanoid")
        if not humanoid or humanoid.Health <= 0 then
            return
        end
        if koCheckEnabled then
            local knocked = char:GetAttribute("Knocked")
            if knocked then
                stopLock()
                return
            end
        end
        local floorMat = humanoid.FloorMaterial or Enum.Material.Air
        local inAir = (floorMat == Enum.Material.Air)
        -- AutoAir
        if inAir and autoAirEnabled and not prevInAir then
            prevInAir = true
            task.delay(0.2, function()
                if targetPlayer and LocalPlayer.Character then
                    local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                    if tool and tool.Parent == LocalPlayer.Character then
                        tool:Activate()
                    end
                end
            end)
        elseif not inAir then
            prevInAir = false
        end
        -- Determine part name safely
        local aimPartName = safeGetDropdownValue("AimPartDropdown", "HumanoidRootPart")
        local airPartName = safeGetDropdownValue("AirPartDropdown", aimPartName)
        local partName = inAir and airPartName or aimPartName
        local rootPart = char:FindFirstChild(partName)
        if not rootPart then
            return
        end
        applyHighlight(char)
        -- CamLock
        if camEnabled then
            local vel = rootPart.Velocity or Vector3.new(0,0,0)
            local fallOffset = 0
            if vel.Y < 0 then fallOffset = -0.27 end
            local offset = Vector3.new(vel.X * predX, vel.Y * predY + fallOffset, vel.Z * predX)
            cam.CFrame = CFrame.new(cam.CFrame.Position, rootPart.Position + offset)
        end
        -- Silent lock
        if lockEnabled then
            silentAim.isActive = true
        end
    end)
end

-- Acquire nearest target
local function attemptLockOn(pl)
    if not (camEnabled or lockEnabled) then
        Library:Notify("Enable CamLock or Lock first 😏")
        return
    end
    if friendCheckEnabled and LocalPlayer:IsFriendsWith(pl.UserId) then
        Library:Notify("Skipping friend "..pl.Name)
        return
    end
    if wallCheckEnabled then
        local root = pl.Character and pl.Character:FindFirstChild(safeGetDropdownValue("AimPartDropdown", "HumanoidRootPart"))
        if root and raycastBlock(cam.CFrame.Position, root.Position) then
            Library:Notify("Wall blocks "..pl.Name..", skipping")
            return
        end
    end
    targetPlayer = pl
    silentAim.isActive = lockEnabled
    btn.Text = "🔒"
    Library:Notify("Tanku:Locked in "..pl.Name)
    startRenderSteppedLock(pl)
end

-- Button dragging
local dragging = false
local dragInput, dragStart, startPos
btn.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseButton1 then
        dragging = true
        dragStart = input.Position
        startPos = btn.Position
        input.Changed:Connect(function()
            if input.UserInputState == Enum.UserInputState.End then
                dragging = false
            end
        end)
    end
end)
btn.InputChanged:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.Touch or input.UserInputType == Enum.UserInputType.MouseMovement then
        dragInput = input
    end
end)
UserInputService.InputChanged:Connect(function(input)
    if input == dragInput and dragging then
        local delta = input.Position - dragStart
        btn.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
    end
end)

-- Button click: acquire or release
btn.MouseButton1Click:Connect(function()
    if targetPlayer then
        local char = targetPlayer.Character
        local humanoid = char and char:FindFirstChild("Humanoid")
        if char and humanoid and humanoid.Health > 0 then
            stopLock()
            return
        end
    end
    local closest, minDist = nil, math.huge
    for _, pl in pairs(Players:GetPlayers()) do
        if pl ~= LocalPlayer and pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") and pl.Character:FindFirstChild("Humanoid") and pl.Character.Humanoid.Health > 0 then
            if friendCheckEnabled and LocalPlayer:IsFriendsWith(pl.UserId) then
                continue
            end
            local root = pl.Character:FindFirstChild(safeGetDropdownValue("AimPartDropdown", "HumanoidRootPart")) or pl.Character:FindFirstChild("HumanoidRootPart")
            if not root then
                continue
            end
            local screenPos, vis = cam:WorldToViewportPoint(root.Position)
            if vis then
                local dx = screenPos.X - cam.ViewportSize.X/2
                local dy = screenPos.Y - cam.ViewportSize.Y/2
                local dist = math.sqrt(dx*dx + dy*dy)
                if dist < minDist then
                    minDist = dist
                    closest = pl
                end
            end
        end
    end
    if closest then
        attemptLockOn(closest)
    else
        Library:Notify("No valid target found 🤷‍♂️")
    end
end)

-- Handle leaving/rejoining
Players.PlayerRemoving:Connect(function(pl)
    if targetPlayer and pl == targetPlayer then
        targetPlayer = nil
        Library:Notify("Target left, unlocking")
    end
end)

-- Misc: Auto Armor
task.spawn(function()
    while task.wait(0.1) do
        if autoArmorEnabled then
            local pad = workspace:FindFirstChild("MAP") and workspace.MAP.Pads:FindFirstChild("[Medium Armor]")
            if pad and pad:FindFirstChild("ClickDetector") then
                pcall(function() fireclickdetector(pad.ClickDetector) end)
            end
        end
    end
end)

-- Misc: Auto Reload
local function setupAmmoWatcher(tool)
    if not tool or not tool:IsA("Tool") then return end
    local ammo = tool:FindFirstChild("AMMO")
    if ammo and not ammo:GetAttribute("WatcherConnected") then
        ammo:SetAttribute("WatcherConnected", true)
        ammo.Changed:Connect(function()
            if autoReloadEnabled then
                local val = ammo.Value
                if val and val <= 0 then
                    local rl = tool:FindFirstChild("rl")
                    if rl then pcall(function() rl:FireServer() end) end
                end
            end
        end)
    end
end
Players.LocalPlayer.CharacterAdded:Connect(function(char)
    char.ChildAdded:Connect(function(c) setupAmmoWatcher(c) end)
    for _,c in pairs(char:GetChildren()) do setupAmmoWatcher(c) end
end)
for _,tool in pairs(LocalPlayer.Backpack:GetChildren()) do setupAmmoWatcher(tool) end
LocalPlayer.Backpack.ChildAdded:Connect(function(c) setupAmmoWatcher(c) end)
pcall(function()
    game:GetService("StarterGui"):SetCore("SendNotification",{Title="MoonLight Loaded",Text="Enjoy 🌙"})
end)

-- No jump cooldown as before
local mt = getrawmetatable(game)
local oldNewIndex = mt.__newindex
setreadonly(mt,false)
mt.__newindex = newcclosure(function(self, Index, Value)
    if not checkcaller() and typeof(self)=="Instance" and self:IsA and self:IsA("Humanoid") and Index=="JumpPower" then
        return
    end
    return oldNewIndex(self, Index, Value)
end)
setreadonly(mt,true)

-- Silent lock hook: use silentAim.isActive and targetPlayer
local mt2 = getrawmetatable(game)
local oldNamecall = mt2.__namecall
setreadonly(mt2,false)
mt2.__namecall = newcclosure(function(...)
    local args = {...}
    local method = getnamecallmethod()
    if silentAim.isActive and targetPlayer and targetPlayer.Character and method == "FireServer" then
        for _,m in ipairs({"UpdateMousePos","GetMousePos","MousePos","MOUSE","MousePosUpdate","UpdateMousePosI"}) do
            if args[2] == m then
                local char = targetPlayer.Character
                if char then
                    local humanoid = char:FindFirstChildWhichIsA("Humanoid")
                    local floorMat = (humanoid and humanoid.FloorMaterial) or Enum.Material.Air
                    local aimPartName = silentAim.targetPart or "HumanoidRootPart"
                    local airPartName = safeGetDropdownValue("AirPartDropdown", aimPartName)
                    local partName = (floorMat == Enum.Material.Air) and airPartName or aimPartName
                    local root = char:FindFirstChild(partName)
                    if root then
                        local vel = root.Velocity or Vector3.new(0,0,0)
                        local fallOffset = 0
                        if vel.Y < 0 then fallOffset = -0.27 end
                        args[3] = root.Position + (vel * silentAim.prediction) + Vector3.new(0, fallOffset, 0)
                    end
                end
                break
            end
        end
    end
    return oldNamecall(table.unpack(args))
end)
setreadonly(mt2,true)
