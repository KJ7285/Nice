-- MoonLight GUI with CamLock / Lock, Misc toggles, organized, with correct UI-element references
local Library = loadstring(game:HttpGet("https://raw.githubusercontent.com/Mc4121ban/Linoria-Library-Mobile/refs/heads/main/Gui%20Lib%20%5BLibrary%5D"))()
local ThemeManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/KJ7285/Theme-manger-/refs/heads/main/ThemeManager.Lua"))()
local SaveManager = loadstring(game:HttpGet("https://raw.githubusercontent.com/Mc4121ban/Linoria-Library-Mobile/refs/heads/main/Gui%20Lib%20%5BSaveManager%5D"))()

local Window = Library:CreateWindow({
    Title = '[MoonLight]🌙',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2,
    Size = UDim2.new(0, 450, 0, 450),
})

local Tabs = {
    Main = Window:AddTab('Main'),
    Misc = Window:AddTab('Misc'),
    ['UI Settings'] = Window:AddTab('UI Settings'),
}

-- Config vars
local predX, predY = 0.13946352838245239, 0.075
local camEnabled, lockEnabled = false, false
local targetPlayer, targetUserId = nil, nil
local waitingForRejoin = false
local connRender, currentHighlight = nil, nil
local wallCheckEnabled, friendCheckEnabled, koCheckEnabled = false, false, false
local autoAirEnabled, prevInAir = false, false
local autoArmorEnabled, autoReloadEnabled = false, false
local silentAim = { isActive = false, targetPart = "HumanoidRootPart", prediction = 0.165 }

-- R15 parts list
local r15Parts = {
    "HumanoidRootPart", "LowerTorso", "UpperTorso", "Head",
    "LeftUpperArm", "LeftLowerArm", "LeftHand",
    "RightUpperArm", "RightLowerArm", "RightHand",
    "LeftUpperLeg", "LeftLowerLeg", "LeftFoot",
    "RightUpperLeg", "RightLowerLeg", "RightFoot"
}

-- Main UI elements
local mainGroup = Tabs.Main:AddLeftGroupbox('CamLock Settings')
local camToggle = mainGroup:AddToggle('Cam', {
    Text = 'CamLock', Default = false, Tooltip = 'Enable camera lock',
    Callback = function(v) camEnabled = v end,
})
local lockToggle = mainGroup:AddToggle('Lock', {
    Text = 'Lock', Default = false, Tooltip = 'Enable silent lock',
    Callback = function(v)
        lockEnabled = v
        silentAim.isActive = v
        if not v then
            targetPlayer = nil
        end
    end,
})
mainGroup:AddInput('PredX', {
    Text = 'Cam Pred X', Default = tostring(predX), Numeric = true,
    Placeholder = 'e.g. 0.139', Callback = function(val) predX = tonumber(val) or predX end,
})
mainGroup:AddInput('PredY', {
    Text = 'Cam Pred Y', Default = tostring(predY), Numeric = true,
    Placeholder = 'e.g. 0.075', Callback = function(val) predY = tonumber(val) or predY end,
})
mainGroup:AddInput('HookPred', {
    Text = 'Lock Pred', Default = tostring(silentAim.prediction), Numeric = true,
    Placeholder = 'e.g. 0.165', Callback = function(val) silentAim.prediction = tonumber(val) or silentAim.prediction end,
})
mainGroup:AddDropdown('AimPartDropdown', {
    Values = r15Parts, Default = 1, Text = 'AimPart', Tooltip = 'Part for cam/lock on ground',
    Callback = function(val) silentAim.targetPart = val end,
})
mainGroup:AddDropdown('AirPartDropdown', {
    Values = r15Parts, Default = 1, Text = 'AirPart', Tooltip = 'Part for cam/lock in air',
    Callback = function(val) end,
})
local highlightPicker = mainGroup:AddLabel('Highlight Color'):AddColorPicker('HighlightColor', {
    Default = Color3.new(1,0,0), Title = 'Highlight Color', Transparency = 0,
    Callback = function(val) end,
})
mainGroup:AddToggle('WallCheck', {
    Text = 'WallCheck', Default = false, Tooltip = 'Skip blocked targets',
    Callback = function(v) wallCheckEnabled = v end,
})
mainGroup:AddToggle('FriendCheck', {
    Text = 'FriendCheck', Default = false, Tooltip = 'Skip friends',
    Callback = function(v) friendCheckEnabled = v end,
})
mainGroup:AddToggle('KoCheck', {
    Text = 'KoCheck', Default = false, Tooltip = 'Skip knocked targets',
    Callback = function(v) koCheckEnabled = v end,
})
mainGroup:AddToggle('AutoAir', {
    Text = 'AutoAir', Default = false, Tooltip = 'Activate tool when target in air',
    Callback = function(v) autoAirEnabled = v end,
})

-- Misc tab
local miscGroup = Tabs.Misc:AddLeftGroupbox('Misc Settings')
miscGroup:AddToggle('AutoArmor', {
    Text = 'Auto Armor', Default = false, Tooltip = 'Spam armor pad',
    Callback = function(v) autoArmorEnabled = v end,
})
miscGroup:AddToggle('AutoReload', {
    Text = 'Auto Reload', Default = false, Tooltip = 'Auto reload when ammo hits zero',
    Callback = function(v) autoReloadEnabled = v end,
})

-- UI Settings
ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)
SaveManager:IgnoreThemeSettings()
ThemeManager:SetFolder('MoonLight')
SaveManager:SetFolder('MoonLight/specific-game')
SaveManager:BuildConfigSection(Tabs['UI Settings'])
ThemeManager:ApplyToTab(Tabs['UI Settings'])
SaveManager:LoadAutoloadConfig()

-- Services
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local cam = workspace.CurrentCamera

-- On-screen button
local screenGui = Instance.new("ScreenGui", game:GetService("CoreGui"))
screenGui.Name = "CamLockGui"; screenGui.ResetOnSpawn = false

local btn = Instance.new("TextButton", screenGui)
btn.Size = UDim2.new(0,90,0,90); btn.Position = UDim2.new(0,10,0,100)
btn.AnchorPoint = Vector2.new(0,0); btn.BackgroundTransparency=0.3
btn.BackgroundColor3=Color3.new(0,0,0); btn.BorderSizePixel=0
btn.Text="🔓"; btn.TextScaled=true

local uiCorner = Instance.new("UICorner", btn)
uiCorner.CornerRadius = UDim.new(0,9)

-- Watermark FPS
do
    local frameTimer, frameCount, FPS = tick(), 0, 60
    RunService.RenderStepped:Connect(function()
        frameCount += 1
        if tick() - frameTimer >= 1 then
            FPS = frameCount
            frameCount = 0
            frameTimer = tick()
        end
        Library:SetWatermark(('MoonLight 🌙 | %s fps'):format(math.floor(FPS)))
    end)
end

-- Highlight functions
local function destroyHighlight()
    if currentHighlight then
        currentHighlight:Destroy()
        currentHighlight = nil
    end
end
local function applyHighlight(char)
    destroyHighlight()
    local h = Instance.new("Highlight")
    h.Adornee = char
    h.FillTransparency = 0.5
    h.OutlineTransparency = 0
    h.OutlineColor = highlightPicker.Value or Color3.new(1,0,0)
    h.Parent = char
    currentHighlight = h
end

-- Raycast helper
local function raycastBlock(origin, pos)
    local params = RaycastParams.new()
    params.FilterType = Enum.RaycastFilterType.Blacklist
    params.FilterDescendantsInstances = {LocalPlayer.Character}
    if targetPlayer and targetPlayer.Character then
        table.insert(params.FilterDescendantsInstances, targetPlayer.Character)
    end
    return workspace:Raycast(origin, pos-origin, params) ~= nil
end

-- Stop lock/cam
local function stopLock()
    if connRender then connRender:Disconnect(); connRender = nil end
    destroyHighlight()
    targetPlayer, targetUserId, waitingForRejoin = nil, nil, false
    prevInAir = false
    silentAim.isActive = false
    btn.Text = "🔓"
    Library:Notify("Tanku: Unlocked 🤘")
end

-- Main render loop
local function startRenderSteppedLock(pl)
    if connRender then connRender:Disconnect() end
    connRender = RunService.RenderStepped:Connect(function()
        if not (camEnabled or lockEnabled) or not targetPlayer then
            stopLock(); return
        end
        local char = targetPlayer.Character
        if not char or (char:FindFirstChild("Humanoid") or {Health=0}).Health <= 0 then
            waitingForRejoin = true; return
        end
        if koCheckEnabled and char:GetAttribute("Knocked") then stopLock(); return end

        local humanoid = char:FindFirstChild("Humanoid")
        local inAir = humanoid and humanoid.FloorMaterial == Enum.Material.Air
        if inAir and autoAirEnabled and not prevInAir then
            prevInAir = true
            task.delay(0.2, function()
                local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                if tool then tool:Activate() end
            end)
        elseif not inAir then prevInAir = false end

        local partName = inAir and airDropdown.Value or aimDropdown.Value
        local rootPart = char:FindFirstChild(partName)
        if not rootPart then waitingForRejoin = true; return end
        waitingForRejoin = false

        applyHighlight(char)
        if camEnabled then
            local vel = rootPart.Velocity
            local fallOffset = vel.Y < 0 and -0.27 or 0
            local offset = Vector3.new(vel.X*predX, vel.Y*predY + fallOffset, vel.Z*predX)
            cam.CFrame = CFrame.new(cam.CFrame.Position, rootPart.Position + offset)
        end
        if lockEnabled then silentAim.isActive = true end
    end)
end

-- Acquire target
local function attemptLockOn(pl)
    if not (camEnabled or lockEnabled) then
        return Library:Notify("Enable CamLock or Lock first 🤨")
    end
    if friendCheckEnabled and LocalPlayer:IsFriendsWith(pl.UserId) then
        return Library:Notify("Skipping friend "..pl.Name)
    end
    if wallCheckEnabled then
        local root = pl.Character and pl.Character:FindFirstChild(aimDropdown.Value)
        if root and raycastBlock(cam.CFrame.Position, root.Position) then
            return Library:Notify("Blocked by wall, skipping "..pl.Name)
        end
    end
    targetPlayer, targetUserId = pl, pl.UserId
    prevInAir = false
    silentAim.isActive = lockEnabled
    btn.Text = "🔒"
    Library:Notify("Tanku: Locked in "..pl.Name)
    startRenderSteppedLock(pl)
end

-- Drag button
do
    local dragging, dragInput, dragStart, startPos = false, nil, nil, nil
    btn.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true; dragStart = input.Position; startPos = btn.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then dragging = false end
            end)
        end
    end)
    btn.InputChanged:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            btn.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

-- Button click
btn.MouseButton1Click:Connect(function()
    if targetPlayer then
        local char = targetPlayer.Character
        local hum = char and char:FindFirstChild("Humanoid")
        if char and hum and hum.Health > 0 then stopLock(); return end
    end
    local closest, minDist = nil, math.huge
    for _, pl in ipairs(Players:GetPlayers()) do
        if pl ~= LocalPlayer and pl.Character and pl.Character:FindFirstChild("HumanoidRootPart") then
            local hum = pl.Character:FindFirstChild("Humanoid")
            if hum and hum.Health > 0 then
                if friendCheckEnabled and LocalPlayer:IsFriendsWith(pl.UserId) then continue end
                local root = pl.Character:FindFirstChild(aimDropdown.Value) or pl.Character.HumanoidRootPart
                if root then
                    local screenPos, vis = cam:WorldToViewportPoint(root.Position)
                    if vis then
                        local dx, dy = screenPos.X - cam.ViewportSize.X/2, screenPos.Y - cam.ViewportSize.Y/2
                        local dist = math.sqrt(dx*dx + dy*dy)
                        if dist < minDist then minDist, closest = dist, pl end
                    end
                end
            end
        end
    end
    if closest then attemptLockOn(closest)
    else Library:Notify("No valid target found 🤷‍♂️") end
end)

-- Rejoin handling
Players.PlayerRemoving:Connect(function(pl)
    if targetPlayer == pl then waitingForRejoin = true end
end)
Players.PlayerAdded:Connect(function(pl)
    if waitingForRejoin and pl.UserId == targetUserId then
        pl.CharacterAdded:Connect(function(char)
            if (camEnabled or lockEnabled) and pl.UserId == targetUserId then
                task.wait(0.5)
                if char:FindFirstChild("HumanoidRootPart") then
                    targetPlayer = pl
                    startRenderSteppedLock(pl)
                    Library:Notify("Tanku: Re-locked "..pl.Name)
                end
            end
        end)
    end
end)

-- Auto Armor spam
task.spawn(function()
    while task.wait(0.1) do
        if autoArmorEnabled then
            local pad = workspace:FindFirstChild("MAP") and workspace.MAP.Pads:FindFirstChild("[Medium Armor]")
            if pad and pad:FindFirstChild("ClickDetector") then
                fireclickdetector(pad.ClickDetector)
            end
        end
    end
end)

-- Auto Reload watcher
local function setupAmmoWatcher(tool)
    if not tool or not tool:IsA("Tool") then return end
    local ammo = tool:FindFirstChild("AMMO")
    if ammo and not ammo:GetAttribute("WatcherConnected") then
        ammo:SetAttribute("WatcherConnected", true)
        ammo.Changed:Connect(function()
            if autoReloadEnabled and ammo.Value <= 0 then
                if tool:FindFirstChild("rl") then tool.rl:FireServer() end
            end
        end)
    end
end
Players.LocalPlayer.CharacterAdded:Connect(function(char)
    char.ChildAdded:Connect(setupAmmoWatcher)
    for _, c in ipairs(char:GetChildren()) do setupAmmoWatcher(c) end
end)
for _, tool in ipairs(LocalPlayer.Backpack:GetChildren()) do setupAmmoWatcher(tool) end
LocalPlayer.Backpack.ChildAdded:Connect(setupAmmoWatcher)

game:GetService("StarterGui"):SetCore("SendNotification", {Title="MoonLight Loaded",Text="Enjoy 🌙"})

-- No jump cooldown
do
    local mt = getrawmetatable(game)
    local oldNewIndex = mt.__newindex
    setreadonly(mt,false)
    mt.__newindex = newcclosure(function(self, key, val)
        if not checkcaller() and self:IsA("Humanoid") and key == "JumpPower" then return end
        return oldNewIndex(self, key, val)
    end)
    setreadonly(mt,true)
end

-- Silent lock hook (fixed)
do
    local mt = getrawmetatable(game)
    local oldNamecall = mt.__namecall
    setreadonly(mt, false)

    local methods = {"UpdateMousePos","GetMousePos","MousePos","MOUSE","MousePosUpdate","UpdateMousePosI"}

    local function silent_lock_hook(...)
        local args = {...}
        if silentAim.isActive and targetPlayer and targetPlayer.Character and getnamecallmethod() == "FireServer" then
            for _, m in ipairs(methods) do
                if args[2] == m then
                    local char = targetPlayer.Character
                    local part = char:FindFirstChild(silentAim.targetPart)
                    if part then
                        local vel = part.Velocity
                        local fallOffset = vel.Y < 0 and -0.27 or 0
                        args[3] = part.Position + (vel * silentAim.prediction) + Vector3.new(0, fallOffset, 0)
                    end
                    break
                end
            end
        end
        return oldNamecall(table.unpack(args))
    end

    mt.__namecall = newcclosure(silent_lock_hook)
    setreadonly(mt, true)
end
